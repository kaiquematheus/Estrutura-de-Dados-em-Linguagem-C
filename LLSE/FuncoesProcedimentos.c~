//struct
struct noh{
	int dado;
	struct noh *prox;
};
typedef struct noh *LLSE;

// Funções e Parocedimentos
	
//Inicia a lista
void inicia(LLSE *L){
	*L= NULL;
}

// Insere um elemento no inicio da lista
void insInicio(LLSE *L, int Vr){
	LLSE novo = (LLSE) malloc(sizeof(struct noh));
	if(novo){
		novo->dado = Vr;
		novo->prox = *L;
		*L = novo;
	}
}

// Insere um elemento no final da lista
void insFinalLLSE(LLSE *L, int Vr){
	LLSE novo = (LLSE) malloc(sizeof(struct noh));
	LLSE aux = *L;
	if(*L == NULL){
		novo->dado= Vr;
		novo->prox = *L;
		*L = novo;
	}else{
		while(aux -> prox != NULL){
			aux = aux -> prox;
		}
		aux->prox = novo;
		novo->dado = Vr;
		novo = NULL;
	}
}

// Insere elementos ordenados
void insOrdenadoLLSE(LLSE *L, int valor){
	LLSE aux = *L;
	LLSE novo = (LLSE) malloc(sizeof(struct noh));
	novo->dado = valor;	
	if(*L){
		if(aux->dado >= valor){
			novo->dado = valor;
			novo->prox = aux;
			*L = novo;
		}
		while(aux->prox != NULL && aux->dado < valor){
			if(aux->dado < valor && (aux->prox)->dado >= valor){
				novo->prox= aux->prox;				
				aux->prox = novo;
			}
			aux=aux->prox;		
		}
		if(aux->prox == NULL && aux->dado <= valor){
			aux->prox = novo;
			novo->prox = NULL;
		}
	}else{
		if(*L == NULL){
			novo->prox = NULL;
			*L = novo;
		}
	}
}

//Remove elemento do inicio da lista
void removInicio(LLSE *L){
	if(*L){
		LLSE aux = *L;
		*L = aux->prox;
		free (aux);
	}else{
		printf("\nNão e possivel remorver no inicio!\n");
		printf("Não exitste lista!\nPorfavor crie uma lista!!\n");
	}
}
//Remove elemento do final da lista
void removFinal(LLSE *L){
	if(*L){
		LLSE aux = *L;
		LLSE aux2;
		if(*L==NULL){
			free(aux);
		}else{
		//for(aux=*L;aux->prox!=NULL;aux=aux->prox);
			while(aux->prox !=NULL){
				aux2=aux;
				aux=aux->prox;
			}
			aux2->prox=NULL;
			free(aux);
		}
	}else{
		printf("\nNão e possivel remorver no final!\n");
		printf("Não exitste lista!\nPorfavor crie uma lista!!\n");
	}
}
//Remove elemento por valor
void removPorValor(LLSE *L, int valor){
	if(*L){
		LLSE aux = *L;
		LLSE aux2 =NULL;
		//remove o elemento caso ele seja o primeiro
	      	if(aux->dado == valor && aux->prox !=NULL){
				*L = aux->prox;
				aux2 = aux->prox;
				free (aux);
				aux= aux2;
		}
		
		while(aux->prox != NULL){
			aux2 = aux;
			aux = aux->prox;
			if(aux->dado == valor && aux->prox != NULL){
				aux2->prox = aux->prox;
				free(aux);
				aux=aux2;
			}
			if(aux->dado == valor && aux->prox == NULL){
				aux2->prox = NULL;
				free(aux);
			}
		}
		aux = *L;
		if(aux->dado == valor){
			*L = NULL;
			free(aux);
			printf("ta aqui\n");
		}
	}else{
		printf("\nNão e possivel remorver um elemento por valor!\n");
		printf("Não exitste lista!\nPorfavor crie uma lista!!\n");
	}
}

//Separe uma lista, a partir de um valor informado
void separaListaValor(LLSE *L, LLSE *LS, int valor){
	if(*L){
		LLSE aux = *L;
		LLSE aux2=NULL;
		//Caso esse valor esteja na primeira posição
		if(aux->dado == valor){
			*LS = *L;
			*L=NULL;
		}else{
	
			//Caso esse valor esteja depois da primeira posição
			while(aux->dado != valor){
				aux2 = aux;
				aux=aux->prox;
				if(aux->dado == valor){
					*LS = aux;
					aux2->prox=NULL;
				}	
			}
		}	
	}else{
		printf("\nNão e possivel separa a lista pelo valor!\n");
		printf("Não exitste lista!\nPorfavor crie uma lista!!\n");
	}
}
//Separa lista apartir do indice
void separaListaIndice(LLSE *L,LLSE *LS, int indice){
	if(*L){
		LLSE aux = *L;
		LLSE aux2 = NULL;
		indice = indice -1;
		int cont = 0;
		if(cont == indice){
			*LS = aux;
			*L=NULL;
		}
		while(cont != indice || aux == NULL){
			aux2=aux;
			aux=aux->prox;
			cont ++;
			if(cont == indice){
				*LS = aux;
				aux2->prox= NULL;
			}
		}
	}else{
		printf("\nNão e possivel separa a lista pelo indice!\n");
		printf("Não exitste lista!\nPorfavor crie uma lista!!\n");
	}
}
//Concatene duas listas
void juntandoDuasListas(LLSE *L, LLSE *LS){
	LLSE aux;
	if(*L){
		for(aux = *L; aux->prox !=NULL; aux=aux->prox);
		aux->prox= *LS;
		*LS = NULL;
	}else{
		if(*LS){
			*L=*LS;
		}
	}
}
//Ordena lista crescente
void ordenaListCrescente(LLSE *L){


}
//Limpar a lista
void limpaLista(LLSE *L){
	if(*L){
		LLSE aux;
		LLSE aux2 = *L;
		while(aux2->prox!=NULL){
			aux2=aux2->prox;
			aux = *L;
			*L = aux->prox;
			free (aux);
		}
		free(*L);
		*L=NULL;
	}	
}

//Inverte a lista
void inverteLista(LLSE *L,LLSE *LS){
	if(*L){
		LLSE aux;
		for(aux=*L;aux->prox!=NULL;aux=aux->prox){
			insInicio(LS,aux->dado);
		}
		(insInicio(LS,aux->dado));
		limpaLista(L);
		aux = *LS;
		*L=aux;
		*LS = NULL;
	}
}

// Imprime os elemento da lista
void imprimir(LLSE L){
	if(L){
		if(L == NULL){
			printf("\n");
		}else{
			if(L != NULL){
				printf("[%d] ", L->dado);
				imprimir (L->prox);
			}
		}
	}
}

/*
void imprimir(LLSE L){
	LLSE aux;
	if(L){
		for(aux = L; aux->prox!=NULL;aux=aux->prox){
			printf("[%d]->", aux->dado);
		}
		printf("[%d]", aux->dado);
	}		
}*/					
//Kaíque Matheus R. Cunha  3° SI
